import {
  StoryID,
  UserID,
  StoryAttachmentID,
  TimestampFirestore,
  AudienceGroupID,
  Bucket_File_URL,
  StickerID,
  Username,
} from "./base.types";

export type StoryHashtag = string; // #california_girls --> use isValidHashtag()
export interface Story_Firestore {
  id: StoryID; // index
  userID: UserID; // index
  // story
  caption: string;
  attachments: StoryAttachment_Firestore[];
  // invitePreview will allow this to appear in invite previews (dynamically retrieved)
  // since invites can generated by AudiencePage.generateInvite()
  previewable: boolean;
  // pinned will allow story to appear at top of profile (also dynamically retrieved)
  pinned: boolean;
  // showcase will allow story to appear in timeline (also dynamically retrieved)
  showcase: boolean;
  // thumbnails
  thumbnail: Bucket_File_URL;
  showcaseThumbnail: Bucket_File_URL;
  // visibility
  visibleAudienceGroups: AudienceGroupID[];
  visibleFriends: UserID[];
  visibleHashtags: StoryHashtag[];
  // negative visibility, used for audience group exclusion
  hiddenUsers: UserID[];
  // friends mentioned
  mentionedUsers: UserID[];
  // wishlist mentioned
  mentionedWishlists: StickerID[];
  // duration
  expiresAt: TimestampFirestore;
  // location
  location?: StoryLocation;
  // outbound link to internet (call to action)
  outboundLink?: string;
  // metadata
  createdAt: TimestampFirestore;
  deleted: boolean;
}

export interface StoryLocation {
  title: string;
  url?: string;
  latitude?: number;
  longitude?: number;
}

export interface StoryAttachment_Firestore {
  id: StoryAttachmentID; // index
  storyID: StoryID; // index
  userID: UserID;
  type: StoryAttachmentType; // image or video
  url: Bucket_File_URL; // standard definition url
  thumbnail?: Bucket_File_URL; // thumbnail url
  stream?: HLS_Stream_Manifest_URL; // for video streams only
  altText?: string; // for accessibility
}

export enum StoryAttachmentType {
  IMAGE = "IMAGE",
  VIDEO = "VIDEO",
}

export type HLS_Stream_Manifest_URL = string; // https://storage.googleapis.com/bucket-name/path/to/video/manifest.mpd

// This can be refactored into a push notification
// export interface TeaserMessage_Firestore {
//   id: TeaserMessageID; // index
//   senderID: UserID;
//   receiverID: UserID; // index
//   storyID?: StoryID;
//   text: string;
//   mediaSet: MediaFile_Firestore[];
//   createdAt: TimestampFirestore;
//   sentViaSendbird: boolean;
// }

export interface AudienceGroup_Firestore {
  id: AudienceGroupID; // index
  ownerID: UserID; // index
  title: string;
  userIDs: UserID[];
  deleted: boolean;
}
